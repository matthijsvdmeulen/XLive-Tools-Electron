import React from "react";

import './app.scss';

import { parseLogdata, b64toBlob} from "./utilities/Utilities"

import Form from "./components/Form/Form";
import LogView from "./components/LogView/LogView";
import ListView from "./components/ListView/ListView";
import CmdView from "./components/CmdView/CmdView";

class App extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      logdata: [],
      formdata: {
        seloga: [],
        selogb: [],
        inpatha: "",
        inpathb: "",
        outpath: "",
        channels: ""
      }
    };

    this.processForm = this.processForm.bind(this);
  }

  componentDidMount() {

    const testBlob = "yaGjUhAAAACAuwAAyaGjUgMAAAABAAAAADTxCADA/z8AwP8/AMATDwAAAAAAwP8/AMD/PwDA/z8AoGcrXwFwOOaACAymwAgP50AIGydACCZnQAgxp0AIAKeACAgngAgiZ4AIKeeACBpoAAglqAAILSgACDSoAAgDqEAICyhACCkoQAg0aEAIO+hACANogAgK6IAIKOiACDQogAQ76IAIAyjACAqowAgwKMAIM+jACD8owAgHaQAIDikACD4pwAgJagAIEOoACBhqAAgyqgAIOioACAGqQAgJKkAIEKpACDJqQAg56kAEPepACAUqgAgMqoAIF+qACDXqgCw+6oAIBOrACAxqwCQV6sAIG2rACD0qwAgEqwAIDCsAIBUrAAgbKwAIDyvACBarwAgeK8AIP+vACAssAAglbAAIA2xABAvsQCQWrEAIHaxACCUsQAg/bEAIBuyACBIsgAgZrIAIGWzAKCHswAgobMAIBm0ACA3tACQYLQAIIK0ACCgtAAgGLUAIDa1ACBjtQAggbUAIJ+1ACBAugAgXroAIHy6ACCaugAgx7oAID+7ACBduwAge7sAIJm7ACDGuwAg5LsAIE28ACBrvAAgibw

    b64toBlob(testBlob).then(res => this.readFile(res));

  }

  processForm(formData) {
    this.setState({
      logdata: [],
      formdata: formData,
    });
    this.readFile(formData.seloga[0]);
    this.readFile(formData.selogb[0]);
  }

  // Read a given file, and print the output to the given element, sdnumber is not extracted from logfile, just based on order of opening
  readFile = (file) => {
      let reader = new FileReader();
      reader.onload = e => {
          // Extract array of data from binary data from the logfile
          let logData = parseLogdata(e.target.result);

          let logdata = this.state.logdata;
          logdata[logData.SDNumber] = logData;
          this.setState({logdata: logdata});
      };
      reader.onerror = e => {
          // Error occurred
          throw e;
      };
      if(typeof file !== "undefined") {
        reader.readAsArrayBuffer(file);
      }
  }

  render() {
    return (
      <div className="app">
        <h1>X-Live Tools</h1>
        <h2>Convert X-Live files to separate wave files</h2>
        <p>Select your SE_LOG.BIN to extract all data</p>
        <Form
          processForm={this.processForm}
        />
        { this.state.logdata.length > 0 &&
        <div>
          <LogView
            logdata={this.state.logdata}
          />
          <ListView
            logdata={this.state.logdata}
            formdata={this.state.formdata}
          />
          <CmdView
            logdata={this.state.logdata}
            formdata={this.state.formdata}
          />
        </div>
        }
      </div>
    )
  }
}

export default App;
